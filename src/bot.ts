import 'dotenv/config';
import { Bot, Context, InlineKeyboard } from 'grammy';
import { PokerGame } from './game';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

const bot = new Bot(BOT_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–æ–≤
const games = new Map<number, PokerGame>();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx): Promise<void> => {
  await ctx.reply(
    'üÉè –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–∫–µ—Ä-–±–æ—Ç–∞!\n\n' +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/newgame - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n' +
      '/join - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ\n' +
      '/leave - –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É\n' +
      '/startgame - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n' +
      '/status - –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã\n' +
      '/cards - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∫–∞—Ä—Ç—ã\n' +
      '/fold - –°–±—Ä–æ—Å\n' +
      '/call - –ö–æ–ª–ª\n' +
      '/check - –ß–µ–∫\n' +
      '/raise [—Å—É–º–º–∞] - –†–µ–π–∑\n\n' +
      '–î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞!',
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /newgame
bot.command('newgame', async (ctx): Promise<void> => {
  const chatId = ctx.chat?.id;
  if (!chatId) {
    return;
  }

  if (games.has(chatId)) {
    const game = games.get(chatId);
    const keyboard = createGameManagementKeyboard(true, game?.players.size ?? 0);
    await ctx.reply('‚ùå –ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ!', {
      reply_markup: keyboard,
    });
    return;
  }

  games.set(chatId, new PokerGame(chatId));
  const keyboard = createGameManagementKeyboard(true, 0);
  await ctx.reply('üéØ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –ø–æ–∫–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π.', {
    reply_markup: keyboard,
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /join
bot.command('join', async (ctx): Promise<void> => {
  const chatId = ctx.chat?.id;
  const playerId = ctx.from?.id;
  const playerName = ctx.from?.first_name ?? ctx.from?.username ?? '–ò–≥—Ä–æ–∫';

  if (!chatId || !playerId) {
    return;
  }
  await handleJoinGame(ctx, chatId, playerId, playerName);
});

// –ö–æ–º–∞–Ω–¥–∞ /leave
bot.command('leave', async (ctx): Promise<void> => {
  const chatId = ctx.chat?.id;
  const playerId = ctx.from?.id;

  if (!chatId || !playerId) {
    return;
  }

  const game = games.get(chatId);
  if (!game) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.');
    return;
  }

  if (game.removePlayer(playerId)) {
    await ctx.reply(`üëã ${ctx.from?.first_name} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.`);

    if (game.players.size === 0) {
      games.delete(chatId);
      await ctx.reply('üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.');
    }
  } else {
    await ctx.reply('‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /startgame
bot.command('startgame', async (ctx): Promise<void> => {
  const chatId = ctx.chat?.id;
  if (!chatId) {
    return;
  }
  await handleStartGame(ctx, chatId);
});

// –ö–æ–º–∞–Ω–¥–∞ /status
bot.command('status', async (ctx): Promise<void> => {
  const chatId = ctx.chat?.id;
  if (!chatId) {
    return;
  }
  await handleGameStatus(ctx, chatId);
});

// –ö–æ–º–∞–Ω–¥–∞ /cards
bot.command('cards', async (ctx): Promise<void> => {
  const chatId = ctx.chat?.id;
  const playerId = ctx.from?.id;

  if (!chatId || !playerId) {
    return;
  }

  const game = games.get(chatId);
  if (!game) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.');
    return;
  }

  const player = game.players.get(playerId);
  if (!player) {
    await ctx.reply('‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.');
    return;
  }

  try {
    await bot.api.sendMessage(playerId, `üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: ${player.getHandString()}\nüí∞ –§–∏—à–∫–∏: ${player.chips}`);
  } catch {
    await ctx.reply(`${player.name}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start`);
  }
});

// –ò–≥—Ä–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
bot.command('fold', async (ctx): Promise<void> => {
  const chatId = ctx.chat?.id;
  const playerId = ctx.from?.id;
  if (!chatId || !playerId) {
    return;
  }
  await handleInlinePlayerAction(ctx, chatId, playerId, 'fold');
});

bot.command('call', async (ctx): Promise<void> => {
  const chatId = ctx.chat?.id;
  const playerId = ctx.from?.id;
  if (!chatId || !playerId) {
    return;
  }
  await handleInlinePlayerAction(ctx, chatId, playerId, 'call');
});

bot.command('check', async (ctx): Promise<void> => {
  const chatId = ctx.chat?.id;
  const playerId = ctx.from?.id;
  if (!chatId || !playerId) {
    return;
  }
  await handleInlinePlayerAction(ctx, chatId, playerId, 'check');
});

bot.command('raise', async (ctx): Promise<void> => {
  const chatId = ctx.chat?.id;
  const playerId = ctx.from?.id;
  if (!chatId || !playerId) {
    return;
  }

  const match = ctx.message?.text?.match(/\/raise\s+(\d+)/);
  const amount = match ? parseInt(match[1]) : 0;

  if (isNaN(amount) || amount <= 0) {
    await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è —Ä–µ–π–∑–∞.');
    return;
  }

  await handleInlinePlayerAction(ctx, chatId, playerId, 'raise', amount);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query
bot.on('callback_query:data', async (ctx): Promise<void> => {
  const chatId = ctx.chat?.id;
  const playerId = ctx.from?.id;
  const playerName = ctx.from?.first_name ?? ctx.from?.username ?? '–ò–≥—Ä–æ–∫';
  const data = ctx.callbackQuery.data;

  if (!chatId || !playerId) {
    return;
  }

  await ctx.answerCallbackQuery();

  const [action, ...params] = data.split('_');

  switch (action) {
    case 'join':
      await handleJoinGame(ctx, chatId, playerId, playerName);
      break;
    case 'leave':
      await handleLeaveGame(ctx, chatId, playerId, playerName);
      break;
    case 'start':
      await handleStartGame(ctx, chatId);
      break;
    case 'status':
      await handleGameStatus(ctx, chatId);
      break;
    case 'fold':
      await handleInlinePlayerAction(ctx, chatId, playerId, 'fold');
      break;
    case 'call':
      await handleInlinePlayerAction(ctx, chatId, playerId, 'call');
      break;
    case 'check':
      await handleInlinePlayerAction(ctx, chatId, playerId, 'check');
      break;
    case 'raise': {
      if (params.length > 0) {
        const amount = parseInt(params[0], 10);
        await handleInlinePlayerAction(ctx, chatId, playerId, 'raise', amount);
      }
      break;
    }
    case 'allin': {
      const game = games.get(chatId);
      if (game?.players.has(playerId)) {
        const player = game.players.get(playerId);
        if (player) {
          await handleInlinePlayerAction(ctx, chatId, playerId, 'raise', player.chips + player.currentBet);
        }
      }
      break;
    }
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getGameStatusMessage(game: PokerGame): string {
  const status = game.getGameStatus();
  let message = 'üéØ –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:\n';
  message += `üí∞ –ë–∞–Ω–∫: ${status.pot}\n`;
  message += `üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${status.currentBet}\n`;
  message += `üé™ –°—Ç–∞–¥–∏—è: ${getStageEmoji(status.gameState)} ${status.gameState}\n`;
  message += `üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${status.activePlayers}\n`;

  if (status.communityCards) {
    message += `üÉè –û–±—â–∏–µ –∫–∞—Ä—Ç—ã: ${status.communityCards}\n`;
  }

  if (status.currentPlayer !== 'None') {
    message += `‚è∞ –•–æ–¥–∏—Ç: ${status.currentPlayer}`;
  }

  return message;
}

function getStageEmoji(stage: string): string {
  const emojis: Record<string, string> = {
    waiting: '‚è≥',
    preflop: 'üé≤',
    flop: 'üéØ',
    turn: 'üé™',
    river: 'üåä',
    showdown: 'üèÜ',
  };
  return emojis[stage] ?? 'üéÆ';
}

function createGameManagementKeyboard(gameExists = false, playersCount = 0): InlineKeyboard {
  const keyboard = new InlineKeyboard();

  if (!gameExists) {
    keyboard.text('üéØ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', 'newgame');
  } else {
    keyboard.text('‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', 'join').text('‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É', 'leave');
    keyboard.row();

    if (playersCount >= 2) {
      keyboard.text('üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', 'start');
      keyboard.row();
    }

    keyboard.text('üìä –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã', 'status');
  }

  return keyboard;
}

function createPlayerActionKeyboard(game: PokerGame, playerId: number): InlineKeyboard | null {
  const player = game.players.get(playerId);

  if (!player || player.isFolded) {
    return null;
  }

  const keyboard = new InlineKeyboard();
  const callAmount = game.currentBet - player.currentBet;
  const canCheck = callAmount === 0;
  const minRaise = Math.max(game.currentBet * 2, game.currentBet + 20);

  keyboard.text('üö´ –°–±—Ä–æ—Å', 'fold');

  if (canCheck) {
    keyboard.text('‚úÖ –ß–µ–∫', 'check');
  } else {
    keyboard.text(`üìû –ö–æ–ª–ª ${callAmount}`, 'call');
  }

  keyboard.row();

  if (player.chips > callAmount) {
    if (player.chips + player.currentBet >= minRaise) {
      keyboard.text(`üìà –†–µ–π–∑ ${minRaise}`, `raise_${minRaise}`);
    }

    const potRaise = game.pot + game.currentBet;
    if (potRaise > minRaise && player.chips + player.currentBet >= potRaise) {
      keyboard.text(`üéØ –ü–æ—Ç ${potRaise}`, `raise_${potRaise}`);
    }

    keyboard.text('üî• –û–ª–ª-–∏–Ω', 'allin');
  }

  return keyboard;
}

async function handleJoinGame(ctx: Context, chatId: number, playerId: number, playerName: string): Promise<void> {
  const game = games.get(chatId);
  if (!game) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newgame –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.');
    return;
  }

  if (game.addPlayer(playerId, playerName)) {
    const keyboard = createGameManagementKeyboard(true, game.players.size);
    await ctx.reply(`‚úÖ ${playerName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! (${game.players.size}/6 –∏–≥—Ä–æ–∫–æ–≤)`, {
      reply_markup: keyboard,
    });
  } else {
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è (–∏–≥—Ä–æ–∫ —É–∂–µ –≤ –∏–≥—Ä–µ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤).');
  }
}

async function handleLeaveGame(ctx: Context, chatId: number, playerId: number, playerName: string): Promise<void> {
  const game = games.get(chatId);
  if (!game) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.');
    return;
  }

  if (game.removePlayer(playerId)) {
    await ctx.reply(`üëã ${playerName} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.`);

    if (game.players.size === 0) {
      games.delete(chatId);
      await ctx.reply('üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.');
    } else {
      const keyboard = createGameManagementKeyboard(true, game.players.size);
      await ctx.reply('–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...', { reply_markup: keyboard });
    }
  } else {
    await ctx.reply('‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.');
  }
}

async function handleStartGame(ctx: Context, chatId: number): Promise<void> {
  const game = games.get(chatId);
  if (!game) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newgame –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.');
    return;
  }

  if (game.startGame()) {
    await ctx.reply(`üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ö–∞—Ä—Ç—ã —Ä–æ–∑–¥–∞–Ω—ã.\n\n${getGameStatusMessage(game)}`);

    for (const [playerId, player] of game.players) {
      try {
        await bot.api.sendMessage(playerId, `üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: ${player.getHandString()}\nüí∞ –§–∏—à–∫–∏: ${player.chips}`);
      } catch {
        await ctx.reply(`@${player.name}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start`);
      }
    }

    const currentPlayer = game.getCurrentPlayer();
    if (currentPlayer) {
      const keyboard = createPlayerActionKeyboard(game, currentPlayer.id);
      await ctx.reply(`‚è∞ –•–æ–¥–∏—Ç: ${currentPlayer.name}`, {
        reply_markup: keyboard ?? undefined,
      });
    }
  } else {
    await ctx.reply('‚ùå –ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞).');
  }
}

async function handleGameStatus(ctx: Context, chatId: number): Promise<void> {
  const game = games.get(chatId);
  if (!game) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.');
    return;
  }

  const statusMessage = getGameStatusMessage(game);
  const keyboard = game.gameState === 'waiting' ? createGameManagementKeyboard(true, game.players.size) : undefined;

  await ctx.reply(statusMessage, keyboard ? { reply_markup: keyboard } : {});
}

async function handleInlinePlayerAction(
  ctx: Context,
  chatId: number,
  playerId: number,
  action: 'fold' | 'call' | 'check' | 'raise',
  amount = 0,
): Promise<void> {
  const game = games.get(chatId);
  if (!game) {
    await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.');
    return;
  }

  if (game.gameState === 'waiting' || game.gameState === 'showdown') {
    await ctx.reply('‚ùå –°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å —Ö–æ–¥—ã.');
    return;
  }

  const player = game.players.get(playerId);
  if (!player) {
    await ctx.reply('‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.');
    return;
  }

  const currentPlayer = game.getCurrentPlayer();
  if (!currentPlayer || currentPlayer.id !== playerId) {
    await ctx.reply(`‚ùå –°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç ${currentPlayer?.name ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫'}.`);
    return;
  }

  if (game.playerAction(playerId, action, amount)) {
    let actionMessage = `${player.name} `;
    switch (action) {
      case 'fold': {
        actionMessage += '—Å–±—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—ã üö´';
        break;
      }
      case 'call': {
        const callAmount = game.currentBet - player.currentBet;
        actionMessage += `—Å–¥–µ–ª–∞–ª –∫–æ–ª–ª (${callAmount} —Ñ–∏—à–µ–∫) üìû`;
        break;
      }
      case 'check': {
        actionMessage += '—Å–¥–µ–ª–∞–ª —á–µ–∫ ‚úÖ';
        break;
      }
      case 'raise': {
        actionMessage += `–ø–æ–¥–Ω—è–ª –¥–æ ${amount} —Ñ–∏—à–µ–∫ üìà`;
        break;
      }
    }

    await ctx.reply(actionMessage);

    if (game.isRoundComplete()) {
      const activePlayers = Array.from(game.players.values()).filter((p) => !p.isFolded);

      if (activePlayers.length <= 1 || game.gameState === 'river') {
        const results = game.determineWinners();
        const resultsMessage = game.formatGameResults(results);

        await ctx.reply(resultsMessage);

        if (game.gameState === 'river' && activePlayers.length > 1) {
          let handsMessage = 'üÉè –ö–ê–†–¢–´ –ò–ì–†–û–ö–û–í:\n\n';
          for (const player of activePlayers) {
            const bestHand = player.getBestHand(game.communityCards);
            const handCards = bestHand.cards.map((c) => game.getCardString(c)).join(' ');
            handsMessage += `${player.name}:\n`;
            handsMessage += `  –ö–∞—Ä—Ç—ã: ${player.getHandString()}\n`;
            handsMessage += `  –õ—É—á—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: ${bestHand.description}\n`;
            handsMessage += `  5 –∫–∞—Ä—Ç: ${handCards}\n\n`;
          }
          await ctx.reply(handsMessage);
        }

        for (const [playerId, player] of game.players) {
          if (player.chips <= 0) {
            game.removePlayer(playerId);
            await ctx.reply(`üí∏ ${player.name} –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã (–∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ñ–∏—à–∫–∏)`);
          }
        }

        if (game.players.size <= 1) {
          games.delete(chatId);
          await ctx.reply('üèÅ –ò–≥—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        } else {
          const keyboard = createGameManagementKeyboard(true, game.players.size);
          await ctx.reply('üîÑ –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–π —Ä–∞–∑–¥–∞—á–µ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', {
            reply_markup: keyboard,
          });
          game.gameState = 'waiting';
        }
      } else {
        game.nextStreet();
        await ctx.reply(getGameStatusMessage(game));

        const nextPlayer = game.getCurrentPlayer();
        if (nextPlayer) {
          const keyboard = createPlayerActionKeyboard(game, nextPlayer.id);
          await ctx.reply(`‚è∞ –•–æ–¥–∏—Ç: ${nextPlayer.name}`, {
            reply_markup: keyboard ?? undefined,
          });
        }
      }
    } else {
      do {
        game.currentPlayerIndex = (game.currentPlayerIndex + 1) % game.players.size;
      } while (Array.from(game.players.values())[game.currentPlayerIndex].isFolded);

      const nextPlayer = game.getCurrentPlayer();
      if (nextPlayer) {
        const keyboard = createPlayerActionKeyboard(game, nextPlayer.id);
        await ctx.reply(`‚è∞ –•–æ–¥–∏—Ç: ${nextPlayer.name}`, {
          reply_markup: keyboard ?? undefined,
        });
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
void bot.start({
  onStart: (): void => {
    console.info('ü§ñ –ü–æ–∫–µ—Ä –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  },
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err): void => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
});
